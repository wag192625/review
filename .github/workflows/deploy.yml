name: deploy service

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/workflow.yml"
      - "docker-compose.yml"
      - "Dockerfile"
      - "api/**"
      - "client/**"

jobs:
  ssh-agent: # Job 이름
    runs-on: ubuntu-24.04 # GitHub 워크스페이스 환경

    steps: # 실행할 작업(step)
      - name: Checkout code
        uses: actions/checkout@v4

      # 캐시 저장 설정을 위한 action(라이브러리)
      - name: Cache Docker Image Layer
        # actions/cache : 깃허브 캐시 저장소 활용을 위한 라이브러리
        uses: actions/cache@v4.2.0
        with:
          path: /tmp/.buildx-cache
          key: docker-image-layer-cache-$${{ github.sha }}
          restore-keys: docker-image-layer-cache-

      - name: run ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 원격 서버를 신뢰할 수 있는 서버로 등록하는 과정
      # known_hosts : 원격 서버들의 지문이 저장된 파일
      # port를 변경했기 때문에 -p {{ secrets.SSH_PORT }} 입력한 것
      - name: Add Remote Server Fingerprint to Known Hosts
        run: ssh-keyscan -H -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST}} >> ~/.ssh/known_hosts || true


      - name: Create .env file
        run: |
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
        # echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env
        # echo "DOMAIN=${{secrets.DOMAIN}}" >> .env
        # echo "API_URL=${{secrets.API_URL}}" >> .env


###########################

      # 도커 Buildkit 엔진 설정 action(라이브러리)
      - name: Set up Docker Buildkit
        # setup-buildx-action
        # - 워크스페이스에 Buildkit 엔진을 설치하는 action(라이브러리)
        # buildx = Buildkit
        uses: docker/setup-buildx-action@v3

      # BuildKit 엔진 빌더(이미지 빌드를 도와주는 도구) 생성
      # 기존 Docker 빌더 : Cache 파일 저장&불러오기 경로 제어 불가
      - name: Create BuildKit 빌더
        # 1. buildkit 빌더를 생성하는 명령어
        # 2. 빌더(buildkit) 설정 명령어
        run: |
          docker buildx create --use --name buildkit
          docker buildx use buildkit


###########################

      - name: Login DockerHub
        run: echo '${{ secrets.DOCKER_PASSWORD}}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin

      # docker 이미지 빌드
      - name: Docker Image Build
        run: docker compose -f docker-compose.yml build

      # docker 이미지 푸시
      - name: Docker Image Push
        run: docker compose -f docker-compose.yml push

      - name: Copy .env / docker-compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: 'docker-compose.yml,.env'
          target: '~/github-actions-work-directory'

      # 원격 서버에서 Docker 컨테이너 실행
      - name: Pull Image & Up Container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ~/github-actions-work-directory
            docker compose -f docker-compose.yml pull
            docker compose -f docker-compose.yml down
            docker compose -f docker-compose.yml up -d
            docker image prune -f
